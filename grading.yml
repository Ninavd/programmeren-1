# This is a separate section containing a few templates that we will use below.
# The & feature is built into YAML, it is not a special feature of the website.
# The section does not need to be called `templates` necessarily.

templates:
    1: &fullyauto
        type: pass
        subgrades:
            correctness: integer
        automatic:
            correctness: (correctness_score * 100).floor
        calculation: -(correctness/100)
        auto_publish: true
        hide_subgrades: true
    3: &manual
        type: float
        subgrades:
            points: integer
            extra: integer
            late: float
        calculation: ((points + extra) / 6.0 * 9 + 1).round(1)
        hide_calculated: true
    4: &test
        type: pass
        subgrades:
            passed: integer
        calculation: passed
        is_test: true
        hide_subgrades: true

# GRADES - contains definitions of how grades are structured. The names of the
# grades match the names of submits that may be defined in `submit.yml`
# elsewhere, but you can also create grades without an accompanying submit.
#
# The following properties are supported:
#
# - `type` can be `integer`, `float` or `pass`, which influences presentation
# and input
#
# - `subgrades` defines any extra numbers to be added to a grade, with their
# types `integer`, `pass`, `boolean` or `float`
#
# - note: if any subgrades are defined, teaching assistants are only allowed to
# enter those, and can't override the grade itself
#
# - `calculation` is an expression that is evaluated in the context of the
# subgrades, which means you can use any subgrade by name in that expression, as
# well as any standard Ruby objects and syntax
#
# - `automatic` is an expression that is evaluated in the context of any
# automatic grading results (as defined in `submit.yml`) - allowing the use of
# the variable `correctness_score`. It can only be used to fill in subgrades,
# but you can then use the `calculation` to transfer the value of a subgrade
# into the grade.
#
# - `hide_calculated` hides the calculated grade, only showing the entered
# subgrades (to de-emphasize grades for students)
#
# - `hide_subgrades` hides the subgrades, for example if you want to do a simple
# calculation but only show the resulting grade to students
#
# You can leave this out if grading isn't used or if each submit simply requires
# entering a final grade, no subgrades and no calculations.

grades:
    scratch: *fullyauto
    hardware:
        subgrades:
            done: boolean
        calculation: done
        hide_calculated: true
    hello: *fullyauto
    water: *fullyauto
    greedy: *fullyauto
    mario_less: *fullyauto
    mario_more: *fullyauto
    credit: *fullyauto
    initials_less: *fullyauto
    initials_more: *fullyauto
    caesar: *fullyauto
    vigenere: *fullyauto
    crack: *fullyauto
    fifteen: *fullyauto
    fifteen_less: *fullyauto
    fifteen_more: *fullyauto
    find_less: *fullyauto
    find_more: *fullyauto
    whodunit:
        type: float
        subgrades:
            checked: boolean
        calculation: checked.to_i
        hide_calculated: true
    filter_less: *fullyauto
    resize_less: *fullyauto
    resize_more: *fullyauto
    recover: *fullyauto
    speller: *fullyauto
    module 0:
        type: pass
        subgrades:
            done: boolean
        calculation: done
        hide_subgrades: true

    retrospective-c:
        subgrades:
            done: boolean
        calculation: done
        hide_calculated: true
    
    module 1: *manual
    module 2: *manual
    module 3: *manual
    module 4: *manual
    # module 5:
    #     type: float
    #     subgrades:
    #         points: integer
    #         extra: integer
    #         late: float
    #     calculation: (points / 6.0 * 9).round(1)
    #     hide_calculated: true
    # test A: *test
    # test B: *test
    # test C: *test
    # test D: *test
    # test E: *test
    # test F: *test
    # test G: *test
    # pidac: *test
    # resit:
    #     type: float

# MODULES - define overarching grades that comprise several different problems.
# The names are simply the names as defined in `submit.yml` for each problem.
# The most important effect of defining a module is that you can view the
# submitted files for each problem at one place, and enter grade information for
# the module. Also, whenever a problem is submitted, the submitted date for the
# module is updated accordingly.
#
# You can leave this out if the modules feature will not be used.

modules:
    module 0:
        - scratch
        - hardware
    module 1:
        - hello
        - water
        - greedy
        - mario_less
        - credit
    module 2:
        - initials_less
        - caesar
        - vigenere
        - crack
    module 3:
        - fifteen
        - fifteen_less
        - fifteen_more
        - find_less
        - find_more
    module 4:
        - whodunit
        - filter_less
        - resize_less
        - resize_more
        - recover
    module 5:
        - speller

# CALCULATIONS - define the final grades for the course and the weights between
# subcomponents for each. Often, multiple final grades are differentiated by the
# choice of grades that are used for the calculation, for example calculating
# the "normal" final grade based on the "first exam", and the "resit" final
# grade based on the result of the second exam. Currently, running "calculate
# final grades" on the website will try to calculate all, which might result in
# useless non-grades getting calculated.
#
# Weights specify proportionally to each other and do not need to add up to
# anything in particular. If a weight of 0 is specified, the grade is not used
# in the calculation, but the grade must be "passed" for the calculation to
# succeed.
#
# You can leave this out if the site does not need to perform final grade
# calculations.

calculation:
    final:
        problems: 100
        retrospectives: 0

# SUB-CALCULATIONS - define the components of the course that may be used in
# final grade calculations. A few constraints can be specified.
#
# The following properties are supported:
#
# `submits` are the names of the grades/submits with accompanying weight for
# each
#
# `show_progress: true` will list the results of the grades in a table on
# students' progress pages
#
# `required: true` will only "pass" this part if all comprising grades are
# passed (used with pass/fail tests)
#
# `minimum: 5.5` will only "pass" this part if the weighed average of the grades
# is at least the specified minimum
#
# You can leave these out if unused in the `calculation` section.

# toets:
#     # show_progress: true
#     submits:
#         takehome: 1

problems:
    show_progress: true
    submits:
        module 0: 0
        module 1: 1
        module 2: 1
        module 3: 1
        module 4: 1

other:
    show_progress: true
    submits:
        scratch: 1
        hardware: 1
        retrospective-c: 1
