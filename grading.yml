# This is a separate section containing a few templates that we will use below.
# The & feature is built into YAML, it is not a special feature of the website.
# The section does not need to be called `templates` necessarily.

templates:
    1: &automatic
        type: pass
        subgrades:
            done: boolean
        automatic:
            done: -(correctness_score.floor)
        calculation: done
        auto_publish: true
        hide_calculated: true
    4: &semiautomatic
        type: float
        subgrades:
            done: boolean
        automatic:
            done: -(correctness_score.floor)
        calculation: done==-1 && 1.5 || 0
        hide_calculated: true
    2: &manual
        type: float
        subgrades:
            points: integer
        calculation: (points / 6.0 * 9 + 1).round(1)
        hide_calculated: true
    3: &check
        type: pass
        subgrades:
            done: boolean
        calculation: done
        hide_calculated: true
    5: &exam
        type: pass
        subgrades:
            cijfer: float
        calculation: cijfer
        hide_subgrades: true

# GRADES - contains definitions of how grades are structured. The names of the
# grades match the names of submits that may be defined in `submit.yml`
# elsewhere, but you can also create grades without an accompanying submit.
#
# The following properties are supported:
#
# - `type` can be `integer`, `float` or `pass`, which influences presentation
# and input
#
# - `subgrades` defines any extra numbers to be added to a grade, with their
# types `integer`, `pass`, `boolean` or `float`
#
# - note: if any subgrades are defined, teaching assistants are only allowed to
# enter those, and can't override the grade itself
#
# - `calculation` is an expression that is evaluated in the context of the
# subgrades, which means you can use any subgrade by name in that expression, as
# well as any standard Ruby objects and syntax
#
# - `automatic` is an expression that is evaluated in the context of any
# automatic grading results (as defined in `submit.yml`) - allowing the use of
# the variable `correctness_score`. It can only be used to fill in subgrades,
# but you can then use the `calculation` to transfer the value of a subgrade
# into the grade.
#
# - `hide_calculated` hides the calculated grade, only showing the entered
# subgrades (to de-emphasize grades for students)
#
# - `hide_subgrades` hides the subgrades, for example if you want to do a simple
# calculation but only show the resulting grade to students
#
# You can leave this out if grading isn't used or if each submit simply requires
# entering a final grade, no subgrades and no calculations.

grades:
    # scratch: *check
    # hello: *automatic
    # population: *automatic

    # conversion: *automatic
    # mario: *automatic
    # soda: *automatic
    # caffeine: *automatic

    # strings: *check
    # scrabble: *automatic
    # rna: *automatic
    # cypher: *automatic

    # functions: *check
    tiles: *automatic
    snowfall: *check
    game_of_life: *check
    calendar: *automatic

    algorithms: *check
    measurements: *automatic
    sort: *automatic
    big_o: *check
    complexity_puzzle: *check

    beatles: *check
    whodunit: *check
    filter: *automatic

    speller: *automatic
    speller_questions: *check

    #------
    scratch: *check

    hello: *automatic
    functions: *automatic
    binary: *automatic
    byte: *automatic

    acid: *automatic
    orakel: *automatic
    rechthoeken: *automatic
    coupons: *automatic

    repeat: *automatic
    mario: *automatic
    mario_2: *automatic
    driehoek: *automatic
    trapezium: *automatic
    cirkel: *automatic

    regen: *automatic
    population: *automatic
    soda: *automatic
    caffeine: *automatic
    conversion: *automatic
    goldbach: *automatic

    strings: *automatic
    tennis: *automatic
    morse: *automatic
    hoofdletters: *automatic
    klinkers: *automatic
    rna: *automatic
    strings_more: *automatic
    morse_more: *automatic

    alfabet: *automatic
    scrabble: *automatic
    formule: *automatic
    cypher: *automatic
    wachtwoord: *automatic
    decryptor: *automatic

    unix_cat: *automatic
    unix_head: *automatic
    unix_nl: *automatic
    unix_wc: *automatic
    unix_uniq: *automatic
    unix_cut: *automatic
    unix_paste: *automatic
    unix_strings: *automatic
    unix_tail: *automatic
    unix_recover: *automatic
    unix_filetype: *automatic

    c_strfry: *automatic
    c_strchr: *automatic
    c_strrchr: *automatic
    c_strcat: *automatic
    c_strdup: *automatic
    c_strsep: *automatic

    linked: *manual
    speller_challenge: *manual

    #-------

    # goldbach: *automatic
    # decryptor: *automatic
    design_challenge: *automatic
    find: *automatic
    resize: *automatic

    basics_variables: *check
    basics_control_flow: *check
    basics_arrays: *check
    basics_functions: *check

    review_1: *manual
    review_2: *manual
    review_3: *manual

    oefententamen:
        <<: *check
        exam: true
        files:
            required:
                'makelaar.c': |
                    #include <stdio.h>

                    int verkoopprijs(int m2, int sk, int bk, int wijk)
                    {

                    }

                    int main(void)
                    {
                        printf("55 m2, 1 sk, 1 bk, wijk 1\n");
                        printf("De waarde van het huis is EUR %d,-\n\n", verkoopprijs(55, 1, 1, 1));

                        printf("\n150 m2, 3 sk, 3 bk, wijk 1\n");
                        printf("De waarde van het huis is EUR %d,-\n\n", verkoopprijs(150, 3, 3, 1));

                        printf("\n150 m2, 3 sk, 3 bk, wijk 2\n");
                        printf("De waarde van het huis is EUR %d,-\n", verkoopprijs(150, 3, 3, 2));
                    }
                'header.c': |
                    #include <stdio.h>
                    #include <cs50.h>

                    void header(string name, string date, string description)
                    {

                    }

                    int main(void)
                    {
                        header("Jelle van Assema", "02/10/2023", "Prints hello world");
                    }
                'spam.c': |
                    #include <stdio.h>
                    #include <cs50.h>

                    void spam_check(string subject)
                    {

                    }

                    int main(void)
                    {
                        string subject1 = "CaZhh M0n3y";
                        printf("-> \"%s\"\n", subject1);
                        spam_check(subject1);

                        string subject2 = "Dit was zeker geen spam!";
                        printf("\n-> \"%s\"\n", subject2);
                        spam_check(subject2);

                        string subject3 = "";
                        printf("\n-> \"%s\"\n", subject3);
                        spam_check(subject3);
                    }
                'afgebroken.c': |
                    #include <stdio.h>
                    #include <cs50.h>

                    void afgebroken(string tekst)
                    {

                    }

                    int main(void)
                    {
                        string tekst = "Nederlanders worden steeds ouder, vooral door- dat ze na hun 65ste ...";
                        printf("Origineel: %s\n", tekst);
                        afgebroken(tekst);

                        tekst = "Over de identiteit van de schutter zegt de po- litie: 'Als het de ...";
                        printf("Origineel: %s\n", tekst);
                        afgebroken(tekst);

                        tekst = "Een 36-jarige Geldropse heeft deze week een in- breker in haar ...";
                        printf("Origineel: %s\n", tekst);
                        afgebroken(tekst);
                    }
                'leestijd.c': |
                    #include <stdio.h>

                    void leestijd(int tijden[], int n)
                    {

                    }

                    int main(void)
                    {
                        // zet de leestijden klaar in een array
                        int tijden1[] = { 35, 50, 10, 15 };
                        // roep de functie aan, met de array en ook de lengte van de array
                        printf("{ 35, 50, 10, 15 }\n");
                        leestijd(tijden1, 4);

                        // zet de leestijden klaar in een array
                        int tijden2[] = { };
                        // roep de functie aan, met de array en ook de lengte van de array
                        printf("{ }\n");
                        leestijd(tijden2, 0);
                    }
    tentamen:
        <<: *check
        deadline: 20/3/24 13:22
        exam: true
        files:
            required:
                'mario51.c': |
                    #include <stdio.h>
                    #include <cs50.h>

                    void mario51(int width, int height)
                    {

                    }

                    int main(void)
                    {
                        mario51(5, 4);
                        printf("\n");
                        mario51(2, 2);
                    }
                'opeenvolgend.c': |
                    #include <stdio.h>
                    #include <cs50.h>

                    bool opeenvolgend(string tekst)
                    {

                    }

                    int main(void)
                    {
                        printf("%d\n", opeenvolgend("aap mies noot")); // true (1)
                        printf("%d\n", opeenvolgend("aap noot mies")); // false (0)
                        printf("%d\n", opeenvolgend("aap"));           // true (1)
                        printf("%d\n", opeenvolgend(""));              // false (0)
                    }
                'uitschrijven.c': |
                    #include <stdio.h>
                    #include <cs50.h>

                    void schrijf_uit(int getallen[], int aantal_getallen,
                                     string uitgeschreven[], int aantal_uitgeschreven)
                    {

                    }

                    int main(void)
                    {
                        int getallen[] = {3, 7, 5, 1};
                        int aantal_getallen = 4;
                        string uitgeschreven[] = {"nul", "een", "twee"};
                        int aantal_uitgeschreven = 3;

                        schrijf_uit(getallen, aantal_getallen, uitgeschreven, aantal_uitgeschreven);
                        // print: 3 7 5 een

                        string uitgeschreven2[] = {"nul", "een", "twee", "drie", "vier", "vijf"};
                        int aantal_uitgeschreven2 = 6;
                        schrijf_uit(getallen, aantal_getallen, uitgeschreven2, aantal_uitgeschreven2);
                        // print: drie 7 vijf een

                        string uitgeschreven3[] = {"cero", "uno", "dos", "tres", "cuatro"};
                        int aantal_uitgeschreven3 = 5;
                        schrijf_uit(getallen, aantal_getallen, uitgeschreven3, aantal_uitgeschreven3);
                        // print: tres 7 5 uno
                    }
                'decrypt.c': |
                    #include <stdio.h>
                    #include <cs50.h>

                    void decrypt(int numbers[], int n)
                    {

                    }

                    int main(void)
                    {

                        int numbers[] = {0, 72, 3, 79, 3, 82};
                        int n = 6;

                        decrypt(numbers, n);
                    }
                'autocorr.c': |
                    #include <stdio.h>
                    #include <cs50.h>

                    void autocorrect(string tekst)
                    {

                    }

                    int main(void)
                    {
                        autocorrect("Fuzzy Wuzzy was a bear . Fuzzy Wuzzy had no hair.Fuzzy Wuzzy wasn't fuzzy , was he ?");
                    }
    hertentamen:
        <<: *check
        deadline: 30/10/23 13:22

    punten_module_9: *check
    punten_module_9_more: *check
    punten_module_10: *check
    punten_module_10_more: *check
    punten_module_11: *check
    punten_module_11_more: *check
    punten_module_12: *check
    punten_module_12_more: *check
    punten_module_13: *check
    punten_module_13_more: *check

# CALCULATIONS - define the final grades for the course and the weights between
# subcomponents for each. Often, multiple final grades are differentiated by the
# choice of grades that are used for the calculation, for example calculating
# the "normal" final grade based on the "first exam", and the "resit" final
# grade based on the result of the second exam. Currently, running "calculate
# final grades" on the website will try to calculate all, which might result in
# useless non-grades getting calculated.
#
# Weights specify proportionally to each other and do not need to add up to
# anything in particular. If a weight of 0 is specified, the grade is not used
# in the calculation, but the grade must be "passed" for the calculation to
# succeed.
#
# You can leave this out if the site does not need to perform final grade
# calculations.

calculation:
    eindcijfer:
        eindcijfer: 1
        # code_reviews: 25
        # tentamen: 75
    eindcijfer_herkansing:
        # code_reviews: 25
        hertentamen: 75

# SUB-CALCULATIONS - define the components of the course that may be used in
# final grade calculations. A few constraints can be specified.
#
# The following properties are supported:
#
# `submits` are the names of the grades/submits with accompanying weight for
# each
#
# `show_progress: true` will list the results of the grades in a table on
# students' progress pages
#
# `required: true` will only "pass" this part if all comprising grades are
# passed (used with pass/fail tests)
#
# `minimum: 5.5` will only "pass" this part if the weighed average of the grades
# is at least the specified minimum
#
# You can leave these out if unused in the `calculation` section.

eindcijfer:
    type: points
    show_progress: true
    submits:
        tentamen: 45
        punten_module_9: 7
        punten_module_9_more: 2
        punten_module_10: 7
        punten_module_10_more: 2
        punten_module_11: 7
        punten_module_11_more: 2
        punten_module_12: 7
        punten_module_12_more: 2
        punten_module_13: 7
        punten_module_13_more: 2

module_1:
    show_progress: true
    submits:
        scratch: 1

module_3:
    show_progress: true
    submits:
        hello: 1
        functions: 1
        binary: 1
        byte: 1

module_4:
    show_progress: true
    submits:
        acid: 1
        orakel: 1
        rechthoeken: 1
        coupons: 1

module_5:
    show_progress: true
    submits:
        repeat: 1
        mario: 1
        mario_2: 1
        driehoek: 1
        trapezium: 1
        cirkel: 1

module_6:
    show_progress: true
    submits:
        regen: 1
        population: 1
        soda: 1
        caffeine: 1
        conversion: 1
        goldbach: 1

module_7:
    show_progress: true
    submits:
        strings: 1
        tennis: 1
        morse: 1
        hoofdletters: 1
        klinkers: 1
        rna: 1
        strings_more: 1
        morse_more: 1

module_8:
    show_progress: true
    submits:
        alfabet: 1
        scrabble: 1
        formule: 1
        cypher: 1
        wachtwoord: 1
        decryptor: 1

module_9:
    show_progress: true
    submits:
        calendar: 7
        find: 7
        sort: 7
        design_challenge: 6

module_10:
    show_progress: true
    submits:
        tiles: 7
        snowfall: 7
        game_of_life: 7
        resize: 4

module_11:
    show_progress: true
    submits:
        unix_cat: 2
        unix_head: 2
        unix_nl: 2
        unix_wc: 2
        unix_uniq: 2
        unix_cut: 2
        unix_paste: 2
        unix_strings: 1
        unix_tail: 1
        unix_recover: 1
        unix_filetype: 1

module_12:
    show_progress: true
    submits:
        c_strfry: 1
        c_strchr: 1
        c_strrchr: 1
        c_strcat: 1
        c_strdup: 1
        c_strsep: 1

module_13:
    show_progress: true
    submits:
        beatles: 7
        linked: 7
        speller: 7
        speller_challenge: 6

tentamenoefeningen:
    show_overview: true
    submits:
        oefententamen: 1

tentamen:
    show_progress: true
    required: true
    submits:
        tentamen: 1

hertentamen:
    show_progress: true
    required: true
    submits:
        hertentamen: 1
